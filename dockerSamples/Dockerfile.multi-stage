# Multi-stage, multi-environment Dockerfile
# This file allows building for different environments with the same Dockerfile
# Updated as of April 23, 2025

# Development build stage
FROM node:18-alpine AS dev-deps
WORKDIR /app
COPY package*.json ./
RUN npm ci

# Development image 
FROM dev-deps AS development
WORKDIR /app
COPY . .
# Mount source code and node_modules as volumes in docker-compose
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]
EXPOSE 5173

# Build stage (for staging and production)
FROM dev-deps AS builder

# Set build arguments (will be passed from docker-compose or build command)
ARG BUILD_ENV=production
ARG VITE_API_URL
ARG VITE_APP_ENVIRONMENT
ARG VITE_APP_NAME
ARG VITE_APP_VERSION=1.0.0
ARG VITE_FEATURE_ADMIN_PANEL=true
ARG VITE_FEATURE_DARK_MODE=true
ARG VITE_FEATURE_DEBUG_TOOLS=false
ARG VITE_AUTH_REQUIRE_EMAIL_VERIFICATION=true
ARG VITE_AUTH_TOKEN_EXPIRATION=30

# Set environment variables for build
ENV NODE_ENV=production
ENV VITE_API_URL=${VITE_API_URL}
ENV VITE_APP_ENVIRONMENT=${VITE_APP_ENVIRONMENT}
ENV VITE_APP_NAME=${VITE_APP_NAME}
ENV VITE_APP_VERSION=${VITE_APP_VERSION}
ENV VITE_FEATURE_ADMIN_PANEL=${VITE_FEATURE_ADMIN_PANEL}
ENV VITE_FEATURE_DARK_MODE=${VITE_FEATURE_DARK_MODE}
ENV VITE_FEATURE_DEBUG_TOOLS=${VITE_FEATURE_DEBUG_TOOLS}
ENV VITE_AUTH_REQUIRE_EMAIL_VERIFICATION=${VITE_AUTH_REQUIRE_EMAIL_VERIFICATION}
ENV VITE_AUTH_TOKEN_EXPIRATION=${VITE_AUTH_TOKEN_EXPIRATION}

# Copy source files
COPY . .

# Build the application with the specified environment
RUN echo "Building for ${BUILD_ENV} environment..." && \
    npm run build -- --mode ${BUILD_ENV}

# Add build timestamp to index.html for cache busting
RUN sed -i "s#</head>#<meta name=\"build-timestamp\" content=\"$(date +%Y%m%d%H%M%S)\" /></head>#" ./dist/index.html

# Staging image
FROM nginx:alpine AS staging
# Copy built files from builder
COPY --from=builder /app/dist /usr/share/nginx/html
# Copy Nginx config and entrypoint
COPY nginx.conf /etc/nginx/conf.d/default.conf
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Set staging-specific environment variables
ENV VITE_APP_ENVIRONMENT=staging
ENV VITE_FEATURE_DEBUG_TOOLS=true
ENV VITE_AUTH_REQUIRE_EMAIL_VERIFICATION=true
ENV VITE_AUTH_TOKEN_EXPIRATION=60

EXPOSE 80
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]

# Production image
FROM nginx:alpine AS production
# Copy built files from builder
COPY --from=builder /app/dist /usr/share/nginx/html
# Copy Nginx config and entrypoint
COPY nginx.conf /etc/nginx/conf.d/default.conf
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Set production-specific environment variables
ENV VITE_APP_ENVIRONMENT=production
ENV VITE_FEATURE_DEBUG_TOOLS=false
ENV VITE_AUTH_REQUIRE_EMAIL_VERIFICATION=true
ENV VITE_AUTH_TOKEN_EXPIRATION=30

# Add security configuration
RUN mkdir -p /etc/nginx/conf.d/ && \
    echo "# Enhanced security settings" > /etc/nginx/conf.d/security.conf && \
    echo "add_header X-Frame-Options DENY;" >> /etc/nginx/conf.d/security.conf && \
    echo "add_header X-Content-Type-Options nosniff;" >> /etc/nginx/conf.d/security.conf && \
    echo "add_header X-XSS-Protection \"1; mode=block\";" >> /etc/nginx/conf.d/security.conf

EXPOSE 80
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]